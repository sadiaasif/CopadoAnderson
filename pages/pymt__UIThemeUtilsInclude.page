<apex:page docType="html-5.0" applyBodyTag="false" applyHtmlTag="false"
           showHeader="false" standardStylesheets="false">

<!-- UIUTILS SCRIPT -->
<!-- apex:includeScript value="{!URLFOR($Resource.ForceUI)}"/ -->
<!-- UIUTILS SCRIPT -->

<!-- UITHEME INJECTOR -->
<script type="text/javascript">
(function(myContext){

    // Deal with possible order-of-execution issues.
    // Don't overwrite ourself if we already exist.
    myContext.ForceUI = myContext.ForceUI || {};

    // Utility methods that make simple string comparisons
    // against a local UserUITheme value. This value is
    // injected from a Visualforce page to allow expression
    // evaluation of the $User.UIThemeDisplayed global.
    myContext.ForceUI.isSalesforceClassic = function() {

        return (this.UserUITheme == 'Theme3');
    }
    myContext.ForceUI.isLightningExperience = function() {

        return (this.UserUITheme == 'Theme4d');
    }
    myContext.ForceUI.isSalesforce1 = function() {

        return (this.UserUITheme == 'Theme4t');
    }
    myContext.ForceUI.isSF1orLightning = function() {
        return (this.UserUITheme == 'Theme4t' || this.UserUITheme == 'Theme4d');
    }
    myContext.ForceUI.navigateToURL = function(url, isredirect) {
    isredirect = (isredirect === true);
		if (this.UserUITheme == 'Theme4t' || this.UserUITheme == 'Theme4d') {
			sforce.one.navigateToURL(url, isredirect);
		} else {
			window.location = url;
		}
    }

})(this);

    (function(myContext){
        // Don't overwrite ourself if we already exist.
        myContext.pcForceUI = myContext.pcForceUI || {};

        // Because this is Visualforce, not a static resource,
        // we can access a global variable in an expression.
        myContext.pcForceUI.UserUITheme = '{! $User.UIThemeDisplayed }';
    })(this);
</script>
<!-- UITHEME INJECTOR -->

</apex:page>